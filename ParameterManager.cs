using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Threading;
using System.Globalization; // Required for CultureInfo.InvariantCulture
using Inventor;

namespace iLogicExternal
{
    /// <summary>
    /// Manages the export of Inventor parameters to an external VB class file.
    /// </summary>
    public class ParameterManager
    {
        private const string PARAMS_FILENAME = ".params.vb";
        private readonly SynchronizationContext uiContext;
        private readonly object syncLock = new object();
        private bool isExportingParams = false;

        public ParameterManager()
        {
            uiContext = SynchronizationContext.Current ?? new SynchronizationContext();
        }

        /// <summary>
        /// Exports parameters from a document to a VB class file in the specified folder.
        /// </summary>
        /// <param name="doc">The Inventor document</param>
        /// <param name="targetFolder">The folder to export the parameters to</param>
        public void ExportParameters(Document doc, string targetFolder)
        {
            if (doc == null || string.IsNullOrEmpty(targetFolder))
                return;

            // Prevent overlapping exports
            lock (syncLock)
            {
                if (isExportingParams)
                    return;
                isExportingParams = true;
            }

            try
            {
                // Build the parameter file path
                string paramsFilePath = System.IO.Path.Combine(targetFolder, PARAMS_FILENAME);

                // Generate the parameter class content
                string paramContent = GenerateParameterFileContent(doc);

                // Write the content to the file
                System.IO.File.WriteAllText(paramsFilePath, paramContent);

                System.Diagnostics.Debug.WriteLine($"Exported parameters to {paramsFilePath}");

                // Log a sample of the parameters for debugging
                System.Diagnostics.Debug.WriteLine("Parameter export sample:");
                string[] lines = paramContent.Split(new[] { System.Environment.NewLine }, StringSplitOptions.None);
                int count = 0;
                foreach (string line in lines)
                {
                    if (line.TrimStart().StartsWith("Public Property") && count < 5)
                    {
                        System.Diagnostics.Debug.WriteLine("    " + line.Trim());
                        count++;
                    }
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error exporting parameters: {ex.Message}");
            }
            finally
            {
                lock (syncLock)
                {
                    isExportingParams = false;
                }
            }
        }

        /// <summary>
        /// Generates VB code defining a class with native-typed parameter properties.
        /// </summary>
        /// <param name="doc">The Inventor document</param>
        /// <returns>VB code defining a class with parameter properties</returns>
        private string GenerateParameterFileContent(Document doc)
        {
            StringBuilder sb = new StringBuilder();

            // Add a header comment
            sb.AppendLine("' Parameter class automatically generated by iLogic Parameter Manager");
            sb.AppendLine("' This file contains parameter values, not expressions.");
            sb.AppendLine("' Last updated: " + DateTime.Now.ToString());
            sb.AppendLine();
            sb.AppendLine("Imports System");
            sb.AppendLine();
            sb.AppendLine("Public Class DocumentParameters");
            sb.AppendLine();

            try
            {
                // Get the parameters collection based on the document type
                Parameters parameters = GetDocumentParameters(doc);

                if (parameters != null)
                {
                    // Add each user parameter as a property with native type
                    sb.AppendLine("    ' Define parameters as properties");
                    sb.AppendLine();

                    foreach (Parameter param in parameters.UserParameters)
                    {
                        // Skip parameters that might cause issues or cannot be modified
                        if (param.Name.StartsWith("Key") || string.IsNullOrWhiteSpace(param.Name))
                            continue;

                        try
                        {
                            string paramName = param.Name;
                            object value = param.Value;
                            string units = param.get_Units(); // Use get_Units() for robustness
                            string vbType;
                            string vbValue;

                            // Debug parameter type information
                            System.Diagnostics.Debug.WriteLine($"Parameter {paramName}: Value={value}, Type={value?.GetType().Name}, Units={units}");

                            // Use a more specific test for Boolean parameters
                            if (units.Equals("Boolean", StringComparison.OrdinalIgnoreCase) ||
                                (value is bool || (value != null && value.GetType() == typeof(bool))))
                            {
                                vbType = "Boolean";
                                try
                                {
                                    bool boolValue;
                                    if (value is bool)
                                        boolValue = (bool)value;
                                    else if (value != null && bool.TryParse(value.ToString(), out bool parsedBool))
                                        boolValue = parsedBool;
                                    else
                                        boolValue = false;

                                    vbValue = boolValue ? "True" : "False";
                                }
                                catch (Exception ex)
                                {
                                    System.Diagnostics.Debug.WriteLine($"Boolean conversion error for {paramName}: {ex.Message}");
                                    vbValue = "False";
                                }
                            }
                            // Use a more robust test for Text parameters
                            else if (units.Equals("Text", StringComparison.OrdinalIgnoreCase))
                            {
                                vbType = "String";
                                try { vbValue = "\"" + value.ToString().Replace("\"", "\"\"") + "\""; }
                                catch { vbValue = "\"\""; }
                            }
                            // Assume everything else is numeric
                            else
                            {
                                vbType = "Double";
                                try
                                {
                                    double numValue;
                                    if (value is double)
                                        numValue = (double)value;
                                    else if (value is int)
                                        numValue = (int)value;
                                    else if (value != null && double.TryParse(value.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out double parsedDouble))
                                        numValue = parsedDouble;
                                    else
                                        numValue = 0.0;

                                    vbValue = numValue.ToString(CultureInfo.InvariantCulture);
                                }
                                catch (Exception ex)
                                {
                                    System.Diagnostics.Debug.WriteLine($"Numeric conversion error for {paramName}: {ex.Message}");
                                    vbValue = "0.0";
                                }
                            }

                            // Format the property definition
                            // Example: Public Property Width As Double = 10.0
                            sb.AppendLine($"    Public Property {paramName} As {vbType} = {vbValue}");
                        }
                        catch (Exception ex)
                        {
                            System.Diagnostics.Debug.WriteLine($"Error processing parameter {param.Name}: {ex.Message}");
                            sb.AppendLine($"    ' Error generating property for {param.Name}: {ex.Message}");
                        }
                    }
                }
                else
                {
                    sb.AppendLine("    ' No user parameters found or accessible.");
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error generating parameter content: {ex.Message}");
                sb.AppendLine($"    ' Error accessing parameters: {ex.Message}");
            }

            // End the class
            sb.AppendLine("End Class");

            return sb.ToString();
        }

        /// <summary>
        /// Gets the parameters collection for a document based on its type.
        /// </summary>
        /// <param name="doc">The Inventor document</param>
        /// <returns>The parameters collection or null if not applicable/error.</returns>
        private Parameters GetDocumentParameters(Document doc)
        {
            try
            {
                switch (doc.DocumentType)
                {
                    case DocumentTypeEnum.kPartDocumentObject:
                        return ((PartDocument)doc).ComponentDefinition.Parameters;
                    case DocumentTypeEnum.kAssemblyDocumentObject:
                        return ((AssemblyDocument)doc).ComponentDefinition.Parameters;
                    case DocumentTypeEnum.kDrawingDocumentObject:
                        // Drawings often have limited parameter support compared to parts/assemblies
                        return ((DrawingDocument)doc).Parameters;
                    default:
                        System.Diagnostics.Debug.WriteLine($"Unsupported document type for parameters: {doc.DocumentType}");
                        return null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Error getting document parameters for {doc.DisplayName}: {ex.Message}");
                return null;
            }
        }
    }
}